-- Configuration
blacklists = {
  porn = newSuffixMatchNode(),
  gambling = newSuffixMatchNode(),
  weapons = newSuffixMatchNode(),
  violence = newSuffixMatchNode(),
  hate = newSuffixMatchNode(),
  anon = newSuffixMatchNode(),
  whatever = newSuffixMatchNode()
}

-- Import redis module
local redis = require "redis"

setLocal('0.0.0.0')
controlSocket("127.0.0.1:5900")
setKey("R87GOpYDHYrLM5WBJaY+tGTFcD29cVsJJw1WMTFBu7A=")

-- Function to safely call Redis commands
function safeRedisCall(func, ...)
    local status, result = pcall(func, ...)
    if status then
        return true, result
    else
        errlog("Error interacting with Redis: " .. tostring(result))
        return false, nil
    end
end

-- Function to create a Redis client
function createRedisClient()
    local status, client = safeRedisCall(redis.connect, 'redis', 6379)
    if status then
        return client
    else
        return nil
    end
end

-- Initialize Redis client
local redisClient = createRedisClient()

-- Function to query Redis with error handling
function checkRedis(key, member)

    -- Connection died, first reconnection failed.
    if not redisClient then
      errlog("Redisclient not found, creating")
      redisClient = createRedisClient()
      if not redisClient then
        errlog("Unable to connect to Redis")
        return false
      end
    end

    local status, response = safeRedisCall(redisClient.sismember, redisClient, key, member)

    -- A status of false means connection failed.
    if status == false then
      errlog("Redisclient died, creating")
      -- Recreate the client, lua garbage collector does the rest
      redisClient = createRedisClient()
      if not redisClient then
        errlog("Unable to connect to Redis")
        return false
      end
      local status, response = safeRedisCall(redisClient.sismember, redisClient, key, member)
    end

    if status and response then
        -- infolog("Redis response: " .. tostring(response))
        return true
    else
        -- infolog("No data in Redis for key: " .. key)
        return false
    end

end

-- LuaAction doesn't permits to pass args to functions, so we factor a function for every blacklist
function factory(list)
  return
    function(dq)
      if checkRedis(list, dq.remoteaddr:toString()) then
        dq.dh:setQR(true)
        return DNSAction.Spoof, "127.0.0.1"
      else
        return DNSAction.Allow
      end
   end
end

for k,v in pairs(blacklists) do
  for line in io.lines("/etc/dnsdist/blacklist/" .. k .. ".blacklist") do v:add(line) end
  addAction(SuffixMatchNodeRule(v), LuaAction(factory(k)))
end

newServer("172.18.1.10")
includeDirectory('/etc/dnsdist/conf.d')
